using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace LAB.ZH.SNMP.WCF.B
{
	/// <summary>
	/// Strongly-typed collection for the OidT class.
	/// </summary>
    [Serializable]
	public partial class OidTCollection : ActiveList<OidT, OidTCollection>
	{	   
		public OidTCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>OidTCollection</returns>
		public OidTCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                OidT o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Oid_t table.
	/// </summary>
	[Serializable]
	public partial class OidT : ActiveRecord<OidT>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public OidT()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public OidT(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public OidT(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public OidT(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Oid_t", TableType.Table, DataService.GetInstance("Default"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarOSid = new TableSchema.TableColumn(schema);
				colvarOSid.ColumnName = "OSid";
				colvarOSid.DataType = DbType.String;
				colvarOSid.MaxLength = 255;
				colvarOSid.AutoIncrement = false;
				colvarOSid.IsNullable = true;
				colvarOSid.IsPrimaryKey = false;
				colvarOSid.IsForeignKey = false;
				colvarOSid.IsReadOnly = false;
				colvarOSid.DefaultSetting = @"";
				colvarOSid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOSid);
				
				TableSchema.TableColumn colvarDevname = new TableSchema.TableColumn(schema);
				colvarDevname.ColumnName = "DEVNAME";
				colvarDevname.DataType = DbType.String;
				colvarDevname.MaxLength = 255;
				colvarDevname.AutoIncrement = false;
				colvarDevname.IsNullable = true;
				colvarDevname.IsPrimaryKey = false;
				colvarDevname.IsForeignKey = false;
				colvarDevname.IsReadOnly = false;
				colvarDevname.DefaultSetting = @"";
				colvarDevname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDevname);
				
				TableSchema.TableColumn colvarDEVUPtime = new TableSchema.TableColumn(schema);
				colvarDEVUPtime.ColumnName = "DEVUPtime";
				colvarDEVUPtime.DataType = DbType.String;
				colvarDEVUPtime.MaxLength = 255;
				colvarDEVUPtime.AutoIncrement = false;
				colvarDEVUPtime.IsNullable = true;
				colvarDEVUPtime.IsPrimaryKey = false;
				colvarDEVUPtime.IsForeignKey = false;
				colvarDEVUPtime.IsReadOnly = false;
				colvarDEVUPtime.DefaultSetting = @"";
				colvarDEVUPtime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDEVUPtime);
				
				TableSchema.TableColumn colvarSysContact = new TableSchema.TableColumn(schema);
				colvarSysContact.ColumnName = "sysContact";
				colvarSysContact.DataType = DbType.String;
				colvarSysContact.MaxLength = 255;
				colvarSysContact.AutoIncrement = false;
				colvarSysContact.IsNullable = true;
				colvarSysContact.IsPrimaryKey = false;
				colvarSysContact.IsForeignKey = false;
				colvarSysContact.IsReadOnly = false;
				colvarSysContact.DefaultSetting = @"";
				colvarSysContact.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSysContact);
				
				TableSchema.TableColumn colvarSysName = new TableSchema.TableColumn(schema);
				colvarSysName.ColumnName = "sysName";
				colvarSysName.DataType = DbType.String;
				colvarSysName.MaxLength = 255;
				colvarSysName.AutoIncrement = false;
				colvarSysName.IsNullable = true;
				colvarSysName.IsPrimaryKey = false;
				colvarSysName.IsForeignKey = false;
				colvarSysName.IsReadOnly = false;
				colvarSysName.DefaultSetting = @"";
				colvarSysName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSysName);
				
				TableSchema.TableColumn colvarSysLocation = new TableSchema.TableColumn(schema);
				colvarSysLocation.ColumnName = "sysLocation";
				colvarSysLocation.DataType = DbType.String;
				colvarSysLocation.MaxLength = 255;
				colvarSysLocation.AutoIncrement = false;
				colvarSysLocation.IsNullable = true;
				colvarSysLocation.IsPrimaryKey = false;
				colvarSysLocation.IsForeignKey = false;
				colvarSysLocation.IsReadOnly = false;
				colvarSysLocation.DefaultSetting = @"";
				colvarSysLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSysLocation);
				
				TableSchema.TableColumn colvarC1 = new TableSchema.TableColumn(schema);
				colvarC1.ColumnName = "C1";
				colvarC1.DataType = DbType.String;
				colvarC1.MaxLength = 255;
				colvarC1.AutoIncrement = false;
				colvarC1.IsNullable = true;
				colvarC1.IsPrimaryKey = false;
				colvarC1.IsForeignKey = false;
				colvarC1.IsReadOnly = false;
				colvarC1.DefaultSetting = @"";
				colvarC1.ForeignKeyTableName = "";
				schema.Columns.Add(colvarC1);
				
				TableSchema.TableColumn colvarC2 = new TableSchema.TableColumn(schema);
				colvarC2.ColumnName = "C2";
				colvarC2.DataType = DbType.String;
				colvarC2.MaxLength = 255;
				colvarC2.AutoIncrement = false;
				colvarC2.IsNullable = true;
				colvarC2.IsPrimaryKey = false;
				colvarC2.IsForeignKey = false;
				colvarC2.IsReadOnly = false;
				colvarC2.DefaultSetting = @"";
				colvarC2.ForeignKeyTableName = "";
				schema.Columns.Add(colvarC2);
				
				TableSchema.TableColumn colvarC3 = new TableSchema.TableColumn(schema);
				colvarC3.ColumnName = "C3";
				colvarC3.DataType = DbType.String;
				colvarC3.MaxLength = 255;
				colvarC3.AutoIncrement = false;
				colvarC3.IsNullable = true;
				colvarC3.IsPrimaryKey = false;
				colvarC3.IsForeignKey = false;
				colvarC3.IsReadOnly = false;
				colvarC3.DefaultSetting = @"";
				colvarC3.ForeignKeyTableName = "";
				schema.Columns.Add(colvarC3);
				
				TableSchema.TableColumn colvarC4 = new TableSchema.TableColumn(schema);
				colvarC4.ColumnName = "C4";
				colvarC4.DataType = DbType.String;
				colvarC4.MaxLength = 255;
				colvarC4.AutoIncrement = false;
				colvarC4.IsNullable = true;
				colvarC4.IsPrimaryKey = false;
				colvarC4.IsForeignKey = false;
				colvarC4.IsReadOnly = false;
				colvarC4.DefaultSetting = @"";
				colvarC4.ForeignKeyTableName = "";
				schema.Columns.Add(colvarC4);
				
				TableSchema.TableColumn colvarC5 = new TableSchema.TableColumn(schema);
				colvarC5.ColumnName = "C5";
				colvarC5.DataType = DbType.String;
				colvarC5.MaxLength = 255;
				colvarC5.AutoIncrement = false;
				colvarC5.IsNullable = true;
				colvarC5.IsPrimaryKey = false;
				colvarC5.IsForeignKey = false;
				colvarC5.IsReadOnly = false;
				colvarC5.DefaultSetting = @"";
				colvarC5.ForeignKeyTableName = "";
				schema.Columns.Add(colvarC5);
				
				TableSchema.TableColumn colvarC6 = new TableSchema.TableColumn(schema);
				colvarC6.ColumnName = "C6";
				colvarC6.DataType = DbType.String;
				colvarC6.MaxLength = 255;
				colvarC6.AutoIncrement = false;
				colvarC6.IsNullable = true;
				colvarC6.IsPrimaryKey = false;
				colvarC6.IsForeignKey = false;
				colvarC6.IsReadOnly = false;
				colvarC6.DefaultSetting = @"";
				colvarC6.ForeignKeyTableName = "";
				schema.Columns.Add(colvarC6);
				
				TableSchema.TableColumn colvarC7 = new TableSchema.TableColumn(schema);
				colvarC7.ColumnName = "C7";
				colvarC7.DataType = DbType.String;
				colvarC7.MaxLength = 255;
				colvarC7.AutoIncrement = false;
				colvarC7.IsNullable = true;
				colvarC7.IsPrimaryKey = false;
				colvarC7.IsForeignKey = false;
				colvarC7.IsReadOnly = false;
				colvarC7.DefaultSetting = @"";
				colvarC7.ForeignKeyTableName = "";
				schema.Columns.Add(colvarC7);
				
				TableSchema.TableColumn colvarC8 = new TableSchema.TableColumn(schema);
				colvarC8.ColumnName = "C8";
				colvarC8.DataType = DbType.String;
				colvarC8.MaxLength = 255;
				colvarC8.AutoIncrement = false;
				colvarC8.IsNullable = true;
				colvarC8.IsPrimaryKey = false;
				colvarC8.IsForeignKey = false;
				colvarC8.IsReadOnly = false;
				colvarC8.DefaultSetting = @"";
				colvarC8.ForeignKeyTableName = "";
				schema.Columns.Add(colvarC8);
				
				TableSchema.TableColumn colvarC9 = new TableSchema.TableColumn(schema);
				colvarC9.ColumnName = "C9";
				colvarC9.DataType = DbType.String;
				colvarC9.MaxLength = 255;
				colvarC9.AutoIncrement = false;
				colvarC9.IsNullable = true;
				colvarC9.IsPrimaryKey = false;
				colvarC9.IsForeignKey = false;
				colvarC9.IsReadOnly = false;
				colvarC9.DefaultSetting = @"";
				colvarC9.ForeignKeyTableName = "";
				schema.Columns.Add(colvarC9);
				
				TableSchema.TableColumn colvarC10 = new TableSchema.TableColumn(schema);
				colvarC10.ColumnName = "C10";
				colvarC10.DataType = DbType.String;
				colvarC10.MaxLength = 255;
				colvarC10.AutoIncrement = false;
				colvarC10.IsNullable = true;
				colvarC10.IsPrimaryKey = false;
				colvarC10.IsForeignKey = false;
				colvarC10.IsReadOnly = false;
				colvarC10.DefaultSetting = @"";
				colvarC10.ForeignKeyTableName = "";
				schema.Columns.Add(colvarC10);
				
				TableSchema.TableColumn colvarC11 = new TableSchema.TableColumn(schema);
				colvarC11.ColumnName = "C11";
				colvarC11.DataType = DbType.String;
				colvarC11.MaxLength = 255;
				colvarC11.AutoIncrement = false;
				colvarC11.IsNullable = true;
				colvarC11.IsPrimaryKey = false;
				colvarC11.IsForeignKey = false;
				colvarC11.IsReadOnly = false;
				colvarC11.DefaultSetting = @"";
				colvarC11.ForeignKeyTableName = "";
				schema.Columns.Add(colvarC11);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Default"].AddSchema("Oid_t",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("OSid")]
		[Bindable(true)]
		public string OSid 
		{
			get { return GetColumnValue<string>(Columns.OSid); }
			set { SetColumnValue(Columns.OSid, value); }
		}
		  
		[XmlAttribute("Devname")]
		[Bindable(true)]
		public string Devname 
		{
			get { return GetColumnValue<string>(Columns.Devname); }
			set { SetColumnValue(Columns.Devname, value); }
		}
		  
		[XmlAttribute("DEVUPtime")]
		[Bindable(true)]
		public string DEVUPtime 
		{
			get { return GetColumnValue<string>(Columns.DEVUPtime); }
			set { SetColumnValue(Columns.DEVUPtime, value); }
		}
		  
		[XmlAttribute("SysContact")]
		[Bindable(true)]
		public string SysContact 
		{
			get { return GetColumnValue<string>(Columns.SysContact); }
			set { SetColumnValue(Columns.SysContact, value); }
		}
		  
		[XmlAttribute("SysName")]
		[Bindable(true)]
		public string SysName 
		{
			get { return GetColumnValue<string>(Columns.SysName); }
			set { SetColumnValue(Columns.SysName, value); }
		}
		  
		[XmlAttribute("SysLocation")]
		[Bindable(true)]
		public string SysLocation 
		{
			get { return GetColumnValue<string>(Columns.SysLocation); }
			set { SetColumnValue(Columns.SysLocation, value); }
		}
		  
		[XmlAttribute("C1")]
		[Bindable(true)]
		public string C1 
		{
			get { return GetColumnValue<string>(Columns.C1); }
			set { SetColumnValue(Columns.C1, value); }
		}
		  
		[XmlAttribute("C2")]
		[Bindable(true)]
		public string C2 
		{
			get { return GetColumnValue<string>(Columns.C2); }
			set { SetColumnValue(Columns.C2, value); }
		}
		  
		[XmlAttribute("C3")]
		[Bindable(true)]
		public string C3 
		{
			get { return GetColumnValue<string>(Columns.C3); }
			set { SetColumnValue(Columns.C3, value); }
		}
		  
		[XmlAttribute("C4")]
		[Bindable(true)]
		public string C4 
		{
			get { return GetColumnValue<string>(Columns.C4); }
			set { SetColumnValue(Columns.C4, value); }
		}
		  
		[XmlAttribute("C5")]
		[Bindable(true)]
		public string C5 
		{
			get { return GetColumnValue<string>(Columns.C5); }
			set { SetColumnValue(Columns.C5, value); }
		}
		  
		[XmlAttribute("C6")]
		[Bindable(true)]
		public string C6 
		{
			get { return GetColumnValue<string>(Columns.C6); }
			set { SetColumnValue(Columns.C6, value); }
		}
		  
		[XmlAttribute("C7")]
		[Bindable(true)]
		public string C7 
		{
			get { return GetColumnValue<string>(Columns.C7); }
			set { SetColumnValue(Columns.C7, value); }
		}
		  
		[XmlAttribute("C8")]
		[Bindable(true)]
		public string C8 
		{
			get { return GetColumnValue<string>(Columns.C8); }
			set { SetColumnValue(Columns.C8, value); }
		}
		  
		[XmlAttribute("C9")]
		[Bindable(true)]
		public string C9 
		{
			get { return GetColumnValue<string>(Columns.C9); }
			set { SetColumnValue(Columns.C9, value); }
		}
		  
		[XmlAttribute("C10")]
		[Bindable(true)]
		public string C10 
		{
			get { return GetColumnValue<string>(Columns.C10); }
			set { SetColumnValue(Columns.C10, value); }
		}
		  
		[XmlAttribute("C11")]
		[Bindable(true)]
		public string C11 
		{
			get { return GetColumnValue<string>(Columns.C11); }
			set { SetColumnValue(Columns.C11, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varOSid,string varDevname,string varDEVUPtime,string varSysContact,string varSysName,string varSysLocation,string varC1,string varC2,string varC3,string varC4,string varC5,string varC6,string varC7,string varC8,string varC9,string varC10,string varC11)
		{
			OidT item = new OidT();
			
			item.OSid = varOSid;
			
			item.Devname = varDevname;
			
			item.DEVUPtime = varDEVUPtime;
			
			item.SysContact = varSysContact;
			
			item.SysName = varSysName;
			
			item.SysLocation = varSysLocation;
			
			item.C1 = varC1;
			
			item.C2 = varC2;
			
			item.C3 = varC3;
			
			item.C4 = varC4;
			
			item.C5 = varC5;
			
			item.C6 = varC6;
			
			item.C7 = varC7;
			
			item.C8 = varC8;
			
			item.C9 = varC9;
			
			item.C10 = varC10;
			
			item.C11 = varC11;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varOSid,string varDevname,string varDEVUPtime,string varSysContact,string varSysName,string varSysLocation,string varC1,string varC2,string varC3,string varC4,string varC5,string varC6,string varC7,string varC8,string varC9,string varC10,string varC11)
		{
			OidT item = new OidT();
			
				item.Id = varId;
			
				item.OSid = varOSid;
			
				item.Devname = varDevname;
			
				item.DEVUPtime = varDEVUPtime;
			
				item.SysContact = varSysContact;
			
				item.SysName = varSysName;
			
				item.SysLocation = varSysLocation;
			
				item.C1 = varC1;
			
				item.C2 = varC2;
			
				item.C3 = varC3;
			
				item.C4 = varC4;
			
				item.C5 = varC5;
			
				item.C6 = varC6;
			
				item.C7 = varC7;
			
				item.C8 = varC8;
			
				item.C9 = varC9;
			
				item.C10 = varC10;
			
				item.C11 = varC11;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn OSidColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DevnameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DEVUPtimeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SysContactColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SysNameColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SysLocationColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn C1Column
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn C2Column
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn C3Column
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn C4Column
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn C5Column
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn C6Column
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn C7Column
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn C8Column
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn C9Column
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn C10Column
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn C11Column
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string OSid = @"OSid";
			 public static string Devname = @"DEVNAME";
			 public static string DEVUPtime = @"DEVUPtime";
			 public static string SysContact = @"sysContact";
			 public static string SysName = @"sysName";
			 public static string SysLocation = @"sysLocation";
			 public static string C1 = @"C1";
			 public static string C2 = @"C2";
			 public static string C3 = @"C3";
			 public static string C4 = @"C4";
			 public static string C5 = @"C5";
			 public static string C6 = @"C6";
			 public static string C7 = @"C7";
			 public static string C8 = @"C8";
			 public static string C9 = @"C9";
			 public static string C10 = @"C10";
			 public static string C11 = @"C11";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
