using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace LAB.ZH.SNMP.WCF.B{
    /// <summary>
    /// Strongly-typed collection for the PCINFO2 class.
    /// </summary>
    [Serializable]
    public partial class PCINFO2Collection : ReadOnlyList<PCINFO2, PCINFO2Collection>
    {        
        public PCINFO2Collection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the PCINFO2 view.
    /// </summary>
    [Serializable]
    public partial class PCINFO2 : ReadOnlyRecord<PCINFO2>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("PCINFO2", TableType.View, DataService.GetInstance("Default"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarIp = new TableSchema.TableColumn(schema);
                colvarIp.ColumnName = "IP";
                colvarIp.DataType = DbType.String;
                colvarIp.MaxLength = 255;
                colvarIp.AutoIncrement = false;
                colvarIp.IsNullable = true;
                colvarIp.IsPrimaryKey = false;
                colvarIp.IsForeignKey = false;
                colvarIp.IsReadOnly = false;
                
                schema.Columns.Add(colvarIp);
                
                TableSchema.TableColumn colvarDevname = new TableSchema.TableColumn(schema);
                colvarDevname.ColumnName = "DEVNAME";
                colvarDevname.DataType = DbType.String;
                colvarDevname.MaxLength = 255;
                colvarDevname.AutoIncrement = false;
                colvarDevname.IsNullable = true;
                colvarDevname.IsPrimaryKey = false;
                colvarDevname.IsForeignKey = false;
                colvarDevname.IsReadOnly = false;
                
                schema.Columns.Add(colvarDevname);
                
                TableSchema.TableColumn colvarC4 = new TableSchema.TableColumn(schema);
                colvarC4.ColumnName = "C4";
                colvarC4.DataType = DbType.String;
                colvarC4.MaxLength = 255;
                colvarC4.AutoIncrement = false;
                colvarC4.IsNullable = true;
                colvarC4.IsPrimaryKey = false;
                colvarC4.IsForeignKey = false;
                colvarC4.IsReadOnly = false;
                
                schema.Columns.Add(colvarC4);
                
                TableSchema.TableColumn colvarC5 = new TableSchema.TableColumn(schema);
                colvarC5.ColumnName = "C5";
                colvarC5.DataType = DbType.String;
                colvarC5.MaxLength = 255;
                colvarC5.AutoIncrement = false;
                colvarC5.IsNullable = true;
                colvarC5.IsPrimaryKey = false;
                colvarC5.IsForeignKey = false;
                colvarC5.IsReadOnly = false;
                
                schema.Columns.Add(colvarC5);
                
                TableSchema.TableColumn colvarC6 = new TableSchema.TableColumn(schema);
                colvarC6.ColumnName = "C6";
                colvarC6.DataType = DbType.String;
                colvarC6.MaxLength = 255;
                colvarC6.AutoIncrement = false;
                colvarC6.IsNullable = true;
                colvarC6.IsPrimaryKey = false;
                colvarC6.IsForeignKey = false;
                colvarC6.IsReadOnly = false;
                
                schema.Columns.Add(colvarC6);
                
                TableSchema.TableColumn colvarC7 = new TableSchema.TableColumn(schema);
                colvarC7.ColumnName = "C7";
                colvarC7.DataType = DbType.String;
                colvarC7.MaxLength = 255;
                colvarC7.AutoIncrement = false;
                colvarC7.IsNullable = true;
                colvarC7.IsPrimaryKey = false;
                colvarC7.IsForeignKey = false;
                colvarC7.IsReadOnly = false;
                
                schema.Columns.Add(colvarC7);
                
                TableSchema.TableColumn colvarC8 = new TableSchema.TableColumn(schema);
                colvarC8.ColumnName = "C8";
                colvarC8.DataType = DbType.String;
                colvarC8.MaxLength = 255;
                colvarC8.AutoIncrement = false;
                colvarC8.IsNullable = true;
                colvarC8.IsPrimaryKey = false;
                colvarC8.IsForeignKey = false;
                colvarC8.IsReadOnly = false;
                
                schema.Columns.Add(colvarC8);
                
                TableSchema.TableColumn colvarDEVUPtime = new TableSchema.TableColumn(schema);
                colvarDEVUPtime.ColumnName = "DEVUPtime";
                colvarDEVUPtime.DataType = DbType.String;
                colvarDEVUPtime.MaxLength = 255;
                colvarDEVUPtime.AutoIncrement = false;
                colvarDEVUPtime.IsNullable = true;
                colvarDEVUPtime.IsPrimaryKey = false;
                colvarDEVUPtime.IsForeignKey = false;
                colvarDEVUPtime.IsReadOnly = false;
                
                schema.Columns.Add(colvarDEVUPtime);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Default"].AddSchema("PCINFO2",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public PCINFO2()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public PCINFO2(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public PCINFO2(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public PCINFO2(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("Ip")]
        [Bindable(true)]
        public string Ip 
	    {
		    get
		    {
			    return GetColumnValue<string>("IP");
		    }
            set 
		    {
			    SetColumnValue("IP", value);
            }
        }
	      
        [XmlAttribute("Devname")]
        [Bindable(true)]
        public string Devname 
	    {
		    get
		    {
			    return GetColumnValue<string>("DEVNAME");
		    }
            set 
		    {
			    SetColumnValue("DEVNAME", value);
            }
        }
	      
        [XmlAttribute("C4")]
        [Bindable(true)]
        public string C4 
	    {
		    get
		    {
			    return GetColumnValue<string>("C4");
		    }
            set 
		    {
			    SetColumnValue("C4", value);
            }
        }
	      
        [XmlAttribute("C5")]
        [Bindable(true)]
        public string C5 
	    {
		    get
		    {
			    return GetColumnValue<string>("C5");
		    }
            set 
		    {
			    SetColumnValue("C5", value);
            }
        }
	      
        [XmlAttribute("C6")]
        [Bindable(true)]
        public string C6 
	    {
		    get
		    {
			    return GetColumnValue<string>("C6");
		    }
            set 
		    {
			    SetColumnValue("C6", value);
            }
        }
	      
        [XmlAttribute("C7")]
        [Bindable(true)]
        public string C7 
	    {
		    get
		    {
			    return GetColumnValue<string>("C7");
		    }
            set 
		    {
			    SetColumnValue("C7", value);
            }
        }
	      
        [XmlAttribute("C8")]
        [Bindable(true)]
        public string C8 
	    {
		    get
		    {
			    return GetColumnValue<string>("C8");
		    }
            set 
		    {
			    SetColumnValue("C8", value);
            }
        }
	      
        [XmlAttribute("DEVUPtime")]
        [Bindable(true)]
        public string DEVUPtime 
	    {
		    get
		    {
			    return GetColumnValue<string>("DEVUPtime");
		    }
            set 
		    {
			    SetColumnValue("DEVUPtime", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string Ip = @"IP";
            
            public static string Devname = @"DEVNAME";
            
            public static string C4 = @"C4";
            
            public static string C5 = @"C5";
            
            public static string C6 = @"C6";
            
            public static string C7 = @"C7";
            
            public static string C8 = @"C8";
            
            public static string DEVUPtime = @"DEVUPtime";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
